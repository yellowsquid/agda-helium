------------------------------------------------------------------------
-- Agda Helium
--
-- Properties of the denotational semantics.
------------------------------------------------------------------------

{-# OPTIONS --safe --without-K #-}

open import Helium.Data.Pseudocode.Algebra using (Pseudocode)

module Helium.Semantics.Denotational.Properties
  {i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ}
  (pseudocode : Pseudocode i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ)
  where

import Data.Bool as Bool
import Data.Integer as ùïÄ
open import Data.Fin as Fin using (suc; punchIn)
open import Data.Fin.Patterns using (0F)
open import Data.Nat using (‚Ñï)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ; uncurry)
open import Data.Vec as Vec using (Vec; []; _‚à∑_; lookup; insert; map; zipWith)
import Data.Vec.Properties as Vec‚Çö
open import Data.Vec.Relation.Unary.All as All using (All; []; _‚à∑_)
open import Function
open import Function.Nary.NonDependent using (cong‚Çô)
open import Helium.Data.Pseudocode.Algebra.Properties pseudocode
open import Helium.Data.Pseudocode.Core
open import Level using (Level; _‚äî_; lift; lower)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary using (does; yes; no)

open import Helium.Semantics.Axiomatic pseudocode
import Helium.Semantics.Core.Properties pseudocode
  as Core‚Çö
open import Helium.Semantics.Denotational.Core rawPseudocode
  renaming (module Semantics to Semantics‚Ä≤)

private
  variable
    o k m n : ‚Ñï
    Œ£ Œì Œî Œ£‚Ä≤ Œì‚Ä≤ Œî‚Ä≤ ts : Vec Type n
    t t‚Ä≤ : Type

  module Semantics = Semantics‚Ä≤ proof-2‚ââ0

!-homo-‚ü¶‚üß : ‚àÄ (r : Reference Œ£ Œì t) œÉ,Œ≥ ‚Üí Semantics.expr (! r) œÉ,Œ≥ ‚â° Semantics.ref r œÉ,Œ≥
!-homo-‚ü¶‚üß (state i)          œÉ,Œ≥ = refl
!-homo-‚ü¶‚üß (var i)            œÉ,Œ≥ = refl
!-homo-‚ü¶‚üß [ r ]              œÉ,Œ≥ = cong (_‚à∑ []) (!-homo-‚ü¶‚üß r œÉ,Œ≥)
!-homo-‚ü¶‚üß (unbox r)          œÉ,Œ≥ = cong Vec.head (!-homo-‚ü¶‚üß r œÉ,Œ≥)
!-homo-‚ü¶‚üß (slice r e)        œÉ,Œ≥ = cong (flip Core.sliceVec (lower (Semantics.expr e œÉ,Œ≥))) (!-homo-‚ü¶‚üß r œÉ,Œ≥)
!-homo-‚ü¶‚üß (cut r e)          œÉ,Œ≥ = cong (flip Core.cutVec (lower (Semantics.expr e œÉ,Œ≥))) (!-homo-‚ü¶‚üß r œÉ,Œ≥)
!-homo-‚ü¶‚üß (cast eq r)        œÉ,Œ≥ = cong (Core.castVec eq) (!-homo-‚ü¶‚üß r œÉ,Œ≥)
!-homo-‚ü¶‚üß (head {ts = ts} r) œÉ,Œ≥ = cong (Core.head‚Ä≤ ts) (!-homo-‚ü¶‚üß r œÉ,Œ≥)
!-homo-‚ü¶‚üß (tail {ts = ts} r) œÉ,Œ≥ = cong (Core.tail‚Ä≤ ts) (!-homo-‚ü¶‚üß r œÉ,Œ≥)
