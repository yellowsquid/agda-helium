------------------------------------------------------------------------
-- Agda Helium
--
-- Definition of types and operations used by the Armv8-M pseudocode.
------------------------------------------------------------------------

{-# OPTIONS --safe --without-K #-}

module Helium.Data.Pseudocode where

open import Algebra.Bundles using (RawRing)
open import Algebra.Core
import Algebra.Definitions.RawSemiring as RS
open import Data.Bool.Base using (Bool; if_then_else_)
open import Data.Fin.Base as Fin hiding (cast)
import Data.Fin.Properties as F‚Çö
import Data.Fin.Induction as Induction
open import Data.Nat.Base using (‚Ñï; zero; suc)
open import Data.Vec.Functional
open import Data.Vec.Functional.Relation.Binary.Pointwise using (Pointwise)
import Data.Vec.Functional.Relation.Binary.Pointwise.Properties as Pw‚Çö
open import Function using (_$_; _‚àò‚Ä≤_; id)
open import Helium.Algebra.Bundles using (RawField; RawBooleanAlgebra)
open import Level using (_‚äî_) renaming (suc to ‚Ñìsuc)
open import Relation.Binary.Core using (Rel)
open import Relation.Binary.Definitions using (Decidable)
open import Relation.Binary.PropositionalEquality as P using (_‚â°_)
open import Relation.Nullary using (does)
open import Relation.Nullary.Decidable.Core using (False; toWitnessFalse)

record RawPseudocode b‚ÇÅ b‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ : Set (‚Ñìsuc (b‚ÇÅ ‚äî b‚ÇÇ ‚äî i‚ÇÅ ‚äî i‚ÇÇ ‚äî i‚ÇÉ ‚äî r‚ÇÅ ‚äî r‚ÇÇ ‚äî r‚ÇÉ)) where
  infix 6 _-·∂ª_
  infix 4 _‚âü·µá_ _‚âü·∂ª_ _<·∂ª_ _<·∂ª?_ _‚âü ≥_ _< ≥_ _< ≥?_

  field
    bitRawBooleanAlgebra : RawBooleanAlgebra b‚ÇÅ b‚ÇÇ
    integerRawRing : RawRing i‚ÇÅ i‚ÇÇ
    realRawField : RawField r‚ÇÅ r‚ÇÇ

  open RawBooleanAlgebra bitRawBooleanAlgebra public
    using ()
    renaming (Carrier to Bit; _‚âà_ to _‚âà·µá‚ÇÅ_; _‚ââ_ to _‚ââ·µá‚ÇÅ_; ‚ä§ to 1ùîπ; ‚ä• to 0ùîπ)

  module bitsRawBooleanAlgebra {n} = RawBooleanAlgebra record
    { _‚âà_ = Pointwise (RawBooleanAlgebra._‚âà_ bitRawBooleanAlgebra) {n}
    ; _‚à®_ = zipWith (RawBooleanAlgebra._‚à®_ bitRawBooleanAlgebra)
    ; _‚àß_ = zipWith (RawBooleanAlgebra._‚àß_ bitRawBooleanAlgebra)
    ; ¬¨_ = map (RawBooleanAlgebra.¬¨_ bitRawBooleanAlgebra)
    ; ‚ä§ = replicate (RawBooleanAlgebra.‚ä§ bitRawBooleanAlgebra)
    ; ‚ä• = replicate (RawBooleanAlgebra.‚ä• bitRawBooleanAlgebra)
    }

  open bitsRawBooleanAlgebra public
    hiding (Carrier)
    renaming (_‚âà_ to _‚âà·µá_; _‚ââ_ to _‚ââ·µá_; ‚ä§ to ones; ‚ä• to zeros)

  Bits = Œª n ‚Üí bitsRawBooleanAlgebra.Carrier {n}

  open RawRing integerRawRing public
    renaming
    ( Carrier to ‚Ñ§; _‚âà_ to _‚âà·∂ª_; _‚ââ_ to _‚ââ·∂ª_
    ; _+_ to _+·∂ª_; _*_ to _*·∂ª_; -_ to -·∂ª_; 0# to 0‚Ñ§; 1# to 1‚Ñ§
    ; rawSemiring to integerRawSemiring
    ; +-rawMagma to +·∂ª-rawMagma; +-rawMonoid to +·∂ª-rawMonoid
    ; *-rawMagma to *·∂ª-rawMagma; *-rawMonoid to *·∂ª-rawMonoid
    ; +-rawGroup to +·∂ª-rawGroup
    )

  _-·∂ª_ : Op‚ÇÇ ‚Ñ§
  x -·∂ª y = x +·∂ª -·∂ª y

  open RS integerRawSemiring public using ()
    renaming
    ( _√ó_ to _√ó·∂ª_; _√ó‚Ä≤_ to _√ó‚Ä≤·∂ª_; sum to sum·∂ª
    ; _^_ to _^·∂ª_; _^‚Ä≤_ to _^‚Ä≤·∂ª_; product to product·∂ª
    )

  open RawField realRawField public
    renaming
    ( Carrier to ‚Ñù; _‚âà_ to _‚âà ≥_; _‚ââ_ to _‚ââ ≥_
    ; _+_ to _+ ≥_; _*_ to _* ≥_; -_ to - ≥_; 0# to 0‚Ñù; 1# to 1‚Ñù; _-_ to _- ≥_
    ; rawSemiring to realRawSemiring; rawRing to realRawRing
    ; +-rawMagma to + ≥-rawMagma; +-rawMonoid to + ≥-rawMonoid
    ; *-rawMagma to * ≥-rawMagma; *-rawMonoid to * ≥-rawMonoid
    ; +-rawGroup to + ≥-rawGroup; *-rawAlmostGroup to * ≥-rawAlmostGroup
    )

  open RS realRawSemiring public using ()
    renaming
    ( _√ó_ to _√ó ≥_; _√ó‚Ä≤_ to _√ó‚Ä≤ ≥_; sum to sum ≥
    ; _^_ to _^ ≥_; _^‚Ä≤_ to _^‚Ä≤ ≥_; product to product ≥
    )

  field
    _‚âü·∂ª_  : Decidable _‚âà·∂ª_
    _<·∂ª_  : Rel ‚Ñ§ i‚ÇÉ
    _<·∂ª?_ : Decidable _<·∂ª_

    _‚âü ≥_  : Decidable _‚âà ≥_
    _< ≥_  : Rel ‚Ñù r‚ÇÉ
    _< ≥?_ : Decidable _< ≥_

    _‚âü·µá‚ÇÅ_ : Decidable _‚âà·µá‚ÇÅ_

  _‚âü·µá_ : ‚àÄ {n} ‚Üí Decidable (_‚âà·µá_ {n})
  _‚âü·µá_ = Pw‚Çö.decidable _‚âü·µá‚ÇÅ_

  field
    float : ‚Ñ§ ‚Üí ‚Ñù
    round : ‚Ñù ‚Üí ‚Ñ§

  cast : ‚àÄ {m n} ‚Üí .(eq : m ‚â° n) ‚Üí Bits m ‚Üí Bits n
  cast eq x i = x $ Fin.cast (P.sym eq) i

  2‚Ñ§ : ‚Ñ§
  2‚Ñ§ = 2 √ó‚Ä≤·∂ª 1‚Ñ§

  get·µá : ‚àÄ {n} ‚Üí Fin n ‚Üí Bits n ‚Üí Bit
  get·µá i x = x (opposite i)

  set·µá : ‚àÄ {n} ‚Üí Fin n ‚Üí Bit ‚Üí Op‚ÇÅ (Bits n)
  set·µá i b = updateAt (opposite i) Œª _ ‚Üí b

  slice·µá : ‚àÄ {n} (i : Fin (suc n)) j ‚Üí Bits n ‚Üí Bits (to‚Ñï (i - j))
  slice·µá         zero    zero    x = []
  slice·µá {suc n} (suc i) zero    x = get·µá i x ‚à∑ slice·µá i zero (tail x)
  slice·µá {suc n} (suc i) (suc j) x = slice·µá i j (tail x)

  update·µá : ‚àÄ {n} (i : Fin (suc n)) j ‚Üí Bits (to‚Ñï (i - j)) ‚Üí Op‚ÇÅ (Bits n)
  update·µá {n} = Induction.<-weakInduction P (Œª _ _ ‚Üí id) helper
    where
    P : Fin (suc n) ‚Üí Set b‚ÇÅ
    P i = ‚àÄ j ‚Üí Bits (to‚Ñï (i - j)) ‚Üí Op‚ÇÅ (Bits n)

    eq : ‚àÄ {n} {i : Fin n} ‚Üí to‚Ñï i ‚â° to‚Ñï (inject‚ÇÅ i)
    eq = P.sym $ F‚Çö.to‚Ñï-inject‚ÇÅ _

    eq‚Ä≤ : ‚àÄ {n} {i : Fin n} j ‚Üí to‚Ñï (i - j) ‚â° to‚Ñï (inject‚ÇÅ i - Fin.cast eq j)
    eq‚Ä≤             zero    = eq
    eq‚Ä≤ {i = suc _} (suc j) = eq‚Ä≤ j

    helper : ‚àÄ i ‚Üí P (inject‚ÇÅ i) ‚Üí P (suc i)
    helper i rec zero    y = rec zero (cast eq (tail y)) ‚àò‚Ä≤ set·µá i (y zero)
    helper i rec (suc j) y = rec (Fin.cast eq j) (cast (eq‚Ä≤ j) y)

  hasBit : ‚àÄ {n} ‚Üí Fin n ‚Üí Bits n ‚Üí Bool
  hasBit i x = does (get·µá i x ‚âü·µá‚ÇÅ 1ùîπ)

  infixl 7 _div_ _mod_

  _div_ : ‚àÄ (x y : ‚Ñ§) ‚Üí {y‚ââ0 : False (float y ‚âü ≥ 0‚Ñù)} ‚Üí ‚Ñ§
  (x div y) {y‚ââ0} = round (float x * ≥ toWitnessFalse y‚ââ0 ‚Åª¬π)

  _mod_ : ‚àÄ (x y : ‚Ñ§) ‚Üí {y‚ââ0 : False (float y ‚âü ≥ 0‚Ñù)} ‚Üí ‚Ñ§
  (x mod y) {y‚ââ0} = x -·∂ª y *·∂ª (x div y) {y‚ââ0}

  infixl 5 _<<_
  _<<_ : ‚Ñ§ ‚Üí ‚Ñï ‚Üí ‚Ñ§
  x << n = x *·∂ª 2‚Ñ§ ^‚Ä≤·∂ª n

  module ShiftNotZero
    (1<<n‚ââ0 : ‚àÄ n ‚Üí False (float (1‚Ñ§ << n) ‚âü ≥ 0‚Ñù))
    where

    infixl 5 _>>_
    _>>_ : ‚Ñ§ ‚Üí ‚Ñï ‚Üí ‚Ñ§
    x >> zero  = x
    x >> suc n = (x div (1‚Ñ§ << suc n)) {1<<n‚ââ0 (suc n)}

    get·∂ª : ‚Ñï ‚Üí ‚Ñ§ ‚Üí Bit
    get·∂ª n x =
      if does ((x mod (1‚Ñ§ << suc n)) {1<<n‚ââ0 (suc n)} <·∂ª? 1‚Ñ§ << n)
      then 1ùîπ
      else 0ùîπ

    slice·∂ª : ‚àÄ n i ‚Üí ‚Ñ§ ‚Üí Bits (n ‚Ñï-‚Ñï i)
    slice·∂ª zero    zero    x = []
    slice·∂ª (suc n) zero    x = get·∂ª n x ‚à∑ slice·∂ª n zero x
    slice·∂ª (suc n) (suc i) x = slice·∂ª n i (x >> 1)

  uint : ‚àÄ {n} ‚Üí Bits n ‚Üí ‚Ñ§
  uint x = sum·∂ª Œª i ‚Üí if hasBit i x then 1‚Ñ§ << to‚Ñï i else 0‚Ñ§

  sint : ‚àÄ {n} ‚Üí Bits n ‚Üí ‚Ñ§
  sint {zero}  x = 0‚Ñ§
  sint {suc n} x = uint x -·∂ª (if hasBit (from‚Ñï n) x then 1‚Ñ§ << suc n else 0‚Ñ§)
