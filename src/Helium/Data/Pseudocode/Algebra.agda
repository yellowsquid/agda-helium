------------------------------------------------------------------------
-- Agda Helium
--
-- Definition of types and operations used by the Armv8-M pseudocode.
------------------------------------------------------------------------

{-# OPTIONS --safe --without-K #-}

module Helium.Data.Pseudocode.Algebra where

open import Algebra.Core
import Algebra.Definitions.RawSemiring as RS
open import Data.Bool.Base using (Bool; if_then_else_)
open import Data.Empty using (‚ä•-elim)
open import Data.Fin.Base as Fin hiding (cast; _<_)
import Data.Fin.Properties as F‚Çö
import Data.Fin.Induction as Induction
open import Data.Nat.Base using (‚Ñï; zero; suc)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤)
open import Data.Vec.Functional
open import Data.Vec.Functional.Relation.Binary.Pointwise using (Pointwise)
import Data.Vec.Functional.Relation.Binary.Pointwise.Properties as Pw‚Çö
open import Function using (_$_; _‚àò‚Ä≤_; id)
open import Helium.Algebra.Decidable.Bundles
  using (BooleanAlgebra; RawBooleanAlgebra)
open import Helium.Algebra.Ordered.StrictTotal.Bundles
open import Helium.Algebra.Ordered.StrictTotal.Morphism.Structures
open import Level using (_‚äî_) renaming (suc to ‚Ñìsuc)
open import Relation.Binary.Core using (Rel)
import Relation.Binary.Construct.StrictToNonStrict as ToNonStrict
open import Relation.Binary.Definitions
open import Relation.Binary.Morphism.Structures
open import Relation.Binary.PropositionalEquality as P using (_‚â°_)
import Relation.Binary.Reasoning.StrictPartialOrder as RawReasoning
open import Relation.Binary.Structures using (IsStrictTotalOrder)
open import Relation.Nullary using (does; yes; no) renaming (¬¨_ to ¬¨‚Ä≤_)
open import Relation.Nullary.Decidable.Core
  using (False; toWitnessFalse; fromWitnessFalse)

record RawPseudocode b‚ÇÅ b‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ : Set (‚Ñìsuc (b‚ÇÅ ‚äî b‚ÇÇ ‚äî i‚ÇÅ ‚äî i‚ÇÇ ‚äî i‚ÇÉ ‚äî r‚ÇÅ ‚äî r‚ÇÇ ‚äî r‚ÇÉ)) where
  field
    bitRawBooleanAlgebra : RawBooleanAlgebra b‚ÇÅ b‚ÇÇ
    integerRawRing : RawRing i‚ÇÅ i‚ÇÇ i‚ÇÉ
    realRawField : RawField r‚ÇÅ r‚ÇÇ r‚ÇÉ

  infix 4 _‚âü·∂ª_ _<·∂ª?_ _‚âü ≥_ _< ≥?_ _‚âü·µá_
  field
    _‚âü·∂ª_  : Decidable (RawRing._‚âà_ integerRawRing)
    _<·∂ª?_ : Decidable (RawRing._<_ integerRawRing)
    _‚âü ≥_  : Decidable (RawField._‚âà_ realRawField)
    _< ≥?_ : Decidable (RawField._<_ realRawField)
    _‚âü·µá_  : Decidable (RawBooleanAlgebra._‚âà_ bitRawBooleanAlgebra)

  field
    _/1 : RawRing.Carrier integerRawRing ‚Üí RawField.Carrier realRawField
    ‚åä_‚åã : RawField.Carrier realRawField ‚Üí RawRing.Carrier integerRawRing

  module Bit where
    open RawBooleanAlgebra bitRawBooleanAlgebra public
      renaming (Carrier to Bit; ‚ä§ to 1ùîπ; ‚ä• to 0ùîπ)

    _‚âü_ : Decidable _‚âà_
    _‚âü_ = _‚âü·µá_

  module ‚Ñ§ where
    open RawRing integerRawRing public
      renaming (Carrier to ‚Ñ§; 1# to 1‚Ñ§; 0# to 0‚Ñ§)
    open RS Unordered.rawSemiring public
      hiding (_√ó_; _^_)
      renaming (_√ó‚Ä≤_ to _√ó_; _^‚Ä≤_ to _^_)

    _‚âü_ : Decidable _‚âà_
    _‚âü_ = _‚âü·∂ª_

    _<?_ : Decidable _<_
    _<?_ = _<·∂ª?_

  module ‚Ñù where
    open RawField realRawField public
      renaming (Carrier to ‚Ñù; 1# to 1‚Ñù; 0# to 0‚Ñù)
    open RS Unordered.rawSemiring public
      hiding (_√ó_; _^_)
      renaming (_√ó‚Ä≤_ to _√ó_; _^‚Ä≤_ to _^_)

    _‚âü_ : Decidable _‚âà_
    _‚âü_ = _‚âü ≥_

    _<?_ : Decidable _<_
    _<?_ = _< ≥?_

  open Bit public using (Bit; 1ùîπ; 0ùîπ)
  open ‚Ñ§ public using (‚Ñ§; 1‚Ñ§; 0‚Ñ§)
  open ‚Ñù public using (‚Ñù; 1‚Ñù; 0‚Ñù)

record Pseudocode b‚ÇÅ b‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ :
                  Set (‚Ñìsuc (b‚ÇÅ ‚äî b‚ÇÇ ‚äî i‚ÇÅ ‚äî i‚ÇÇ ‚äî i‚ÇÉ ‚äî r‚ÇÅ ‚äî r‚ÇÇ ‚äî r‚ÇÉ)) where
  field
    bitBooleanAlgebra : BooleanAlgebra b‚ÇÅ b‚ÇÇ
    integerRing       : CommutativeRing i‚ÇÅ i‚ÇÇ i‚ÇÉ
    realField         : Field r‚ÇÅ r‚ÇÇ r‚ÇÉ

  private
    module ‚Ñ§‚Ä≤ = CommutativeRing integerRing
    module ‚Ñù‚Ä≤ = Field realField
    module ‚Ñ§-ord = ToNonStrict ‚Ñ§‚Ä≤._‚âà_ ‚Ñ§‚Ä≤._<_
    module ‚Ñù-ord = ToNonStrict ‚Ñù‚Ä≤._‚âà_ ‚Ñù‚Ä≤._<_

  field
    integerDiscrete : ‚àÄ x y ‚Üí y ‚Ñ§-ord.‚â§ x ‚äé x ‚Ñ§‚Ä≤.+ ‚Ñ§‚Ä≤.1# ‚Ñ§-ord.‚â§ y
    1‚ââ0 : ¬¨‚Ä≤ ‚Ñ§‚Ä≤.1# ‚Ñ§‚Ä≤.‚âà ‚Ñ§‚Ä≤.0#

    _/1 : ‚Ñ§‚Ä≤.Carrier ‚Üí ‚Ñù‚Ä≤.Carrier
    ‚åä_‚åã : ‚Ñù‚Ä≤.Carrier ‚Üí ‚Ñ§‚Ä≤.Carrier
    /1-isHomo : IsRingHomomorphism ‚Ñ§‚Ä≤.rawRing ‚Ñù‚Ä≤.rawRing _/1
    ‚åä‚åã-isHomo : IsOrderHomomorphism ‚Ñù‚Ä≤._‚âà_ ‚Ñ§‚Ä≤._‚âà_ ‚Ñù-ord._‚â§_ ‚Ñ§-ord._‚â§_ ‚åä_‚åã
    ‚åä‚åã-floor : ‚àÄ x y ‚Üí x ‚Ñù‚Ä≤.< y /1 ‚Üí ‚åä x ‚åã ‚Ñ§‚Ä≤.< y
    ‚åäx/1‚åã‚âàx : ‚àÄ x ‚Üí ‚åä x /1 ‚åã ‚Ñ§‚Ä≤.‚âà x

  module Bit where
    open BooleanAlgebra bitBooleanAlgebra public
      renaming (Carrier to Bit; ‚ä§ to 1ùîπ; ‚ä• to 0ùîπ)

  module ‚Ñ§ where
    open CommutativeRing integerRing public
      renaming (Carrier to ‚Ñ§; 1# to 1‚Ñ§; 0# to 0‚Ñ§)
    open RS Unordered.rawSemiring public

    module Reasoning = RawReasoning strictPartialOrder

  module ‚Ñù where
    open Field realField public
      renaming (Carrier to ‚Ñù; 1# to 1‚Ñù; 0# to 0‚Ñù)
    open RS Unordered.rawSemiring public

    module Reasoning = RawReasoning strictPartialOrder

  open Bit public using (Bit; 1ùîπ; 0ùîπ)
  open ‚Ñ§ public using (‚Ñ§; 1‚Ñ§; 0‚Ñ§)
  open ‚Ñù public using (‚Ñù; 1‚Ñù; 0‚Ñù)

  module /1 = IsRingHomomorphism /1-isHomo
  module ‚åä‚åã = IsOrderHomomorphism ‚åä‚åã-isHomo

  bitRawBooleanAlgebra : RawBooleanAlgebra b‚ÇÅ b‚ÇÇ
  bitRawBooleanAlgebra = record
    { _‚âà_ = _‚âà_
    ; _‚à®_ = _‚à®_
    ; _‚àß_ = _‚àß_
    ; ¬¨_  = ¬¨_
    ; ‚ä§   = ‚ä§
    ; ‚ä•   = ‚ä•
    }
    where open BooleanAlgebra bitBooleanAlgebra

  rawPseudocode : RawPseudocode b‚ÇÅ b‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ
  rawPseudocode = record
    { bitRawBooleanAlgebra = bitRawBooleanAlgebra
    ; integerRawRing = ‚Ñ§.rawRing
    ; realRawField = ‚Ñù.rawField
    ; _‚âü·∂ª_ = ‚Ñ§._‚âü_
    ; _<·∂ª?_ = ‚Ñ§._<?_
    ; _‚âü ≥_ = ‚Ñù._‚âü_
    ; _< ≥?_ = ‚Ñù._<?_
    ; _‚âü·µá_ = Bit._‚âü_
    ; _/1 = _/1
    ; ‚åä_‚åã = ‚åä_‚åã
    }
