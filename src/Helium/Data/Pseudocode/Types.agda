------------------------------------------------------------------------
-- Agda Helium
--
-- Definition of types and operations used by the Armv8-M pseudocode.
------------------------------------------------------------------------

{-# OPTIONS --safe --without-K #-}

module Helium.Data.Pseudocode.Types where

open import Algebra.Core
import Algebra.Definitions.RawSemiring as RS
open import Data.Bool.Base using (Bool; if_then_else_)
open import Data.Empty using (‚ä•-elim)
open import Data.Fin.Base as Fin hiding (cast)
import Data.Fin.Properties as F‚Çö
import Data.Fin.Induction as Induction
open import Data.Nat.Base using (‚Ñï; zero; suc)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤)
open import Data.Vec.Functional
open import Data.Vec.Functional.Relation.Binary.Pointwise using (Pointwise)
import Data.Vec.Functional.Relation.Binary.Pointwise.Properties as Pw‚Çö
open import Function using (_$_; _‚àò‚Ä≤_; id)
open import Helium.Algebra.Ordered.StrictTotal.Bundles
open import Helium.Algebra.Decidable.Bundles
  using (BooleanAlgebra; RawBooleanAlgebra)
import Helium.Algebra.Decidable.Construct.Pointwise as Pw
open import Helium.Algebra.Morphism.Structures
open import Level using (_‚äî_) renaming (suc to ‚Ñìsuc)
open import Relation.Binary.Core using (Rel)
open import Relation.Binary.Definitions
open import Relation.Binary.PropositionalEquality as P using (_‚â°_)
import Relation.Binary.Reasoning.StrictPartialOrder as Reasoning
open import Relation.Binary.Structures using (IsStrictTotalOrder)
open import Relation.Nullary using (does; yes; no)
open import Relation.Nullary.Decidable.Core
  using (False; toWitnessFalse; fromWitnessFalse)

record RawPseudocode b‚ÇÅ b‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ : Set (‚Ñìsuc (b‚ÇÅ ‚äî b‚ÇÇ ‚äî i‚ÇÅ ‚äî i‚ÇÇ ‚äî i‚ÇÉ ‚äî r‚ÇÅ ‚äî r‚ÇÇ ‚äî r‚ÇÉ)) where
  field
    bitRawBooleanAlgebra : RawBooleanAlgebra b‚ÇÅ b‚ÇÇ
    integerRawRing : RawRing i‚ÇÅ i‚ÇÇ i‚ÇÉ
    realRawField : RawField r‚ÇÅ r‚ÇÇ r‚ÇÉ

  bitsRawBooleanAlgebra : ‚Ñï ‚Üí RawBooleanAlgebra b‚ÇÅ b‚ÇÇ
  bitsRawBooleanAlgebra =  Pw.rawBooleanAlgebra  bitRawBooleanAlgebra

  module ùîπ = RawBooleanAlgebra bitRawBooleanAlgebra
    renaming (Carrier to Bit; ‚ä§ to 1ùîπ; ‚ä• to 0ùîπ)
  module Bits {n} = RawBooleanAlgebra (bitsRawBooleanAlgebra n)
    renaming (‚ä§ to ones; ‚ä• to zeros)
  module ‚Ñ§ = RawRing integerRawRing renaming (Carrier to ‚Ñ§; 1# to 1‚Ñ§; 0# to 0‚Ñ§)
  module ‚Ñù = RawField realRawField renaming (Carrier to ‚Ñù; 1# to 1‚Ñù; 0# to 0‚Ñù)
  module ‚Ñ§‚Ä≤ = RS ‚Ñ§.Unordered.rawSemiring
  module ‚Ñù‚Ä≤ = RS ‚Ñù.Unordered.rawSemiring

  Bits : ‚Ñï ‚Üí Set b‚ÇÅ
  Bits n = Bits.Carrier {n}

  open ùîπ public using (Bit; 1ùîπ; 0ùîπ)
  open Bits public using (ones; zeros)
  open ‚Ñ§ public using (‚Ñ§; 1‚Ñ§; 0‚Ñ§)
  open ‚Ñù public using (‚Ñù; 1‚Ñù; 0‚Ñù)

  infix 4 _‚âü·∂ª_ _<·∂ª?_ _‚âü ≥_ _< ≥?_ _‚âü·µá‚ÇÅ_ _‚âü·µá_
  field
    _‚âü·∂ª_  : Decidable ‚Ñ§._‚âà_
    _<·∂ª?_ : Decidable ‚Ñ§._<_
    _‚âü ≥_  : Decidable ‚Ñù._‚âà_
    _< ≥?_ : Decidable ‚Ñù._<_
    _‚âü·µá‚ÇÅ_ : Decidable ùîπ._‚âà_

  _‚âü·µá_ : ‚àÄ {n} ‚Üí Decidable (Bits._‚âà_ {n})
  _‚âü·µá_ = Pw‚Çö.decidable _‚âü·µá‚ÇÅ_

  field
    _/1 : ‚Ñ§ ‚Üí ‚Ñù
    ‚åä_‚åã : ‚Ñù ‚Üí ‚Ñ§

record Pseudocode b‚ÇÅ b‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ :
                  Set (‚Ñìsuc (b‚ÇÅ ‚äî b‚ÇÇ ‚äî i‚ÇÅ ‚äî i‚ÇÇ ‚äî i‚ÇÉ ‚äî r‚ÇÅ ‚äî r‚ÇÇ ‚äî r‚ÇÉ)) where
  field
    bitBooleanAlgebra : BooleanAlgebra b‚ÇÅ b‚ÇÇ
    integerRing       : CommutativeRing i‚ÇÅ i‚ÇÇ i‚ÇÉ
    realField         : Field r‚ÇÅ r‚ÇÇ r‚ÇÉ

  bitsBooleanAlgebra : ‚Ñï ‚Üí BooleanAlgebra b‚ÇÅ b‚ÇÇ
  bitsBooleanAlgebra = Pw.booleanAlgebra bitBooleanAlgebra

  module ùîπ = BooleanAlgebra bitBooleanAlgebra
    renaming (Carrier to Bit; ‚ä§ to 1ùîπ; ‚ä• to 0ùîπ)
  module Bits {n} = BooleanAlgebra (bitsBooleanAlgebra n)
    renaming (‚ä§ to ones; ‚ä• to zeros)
  module ‚Ñ§ = CommutativeRing integerRing
    renaming (Carrier to ‚Ñ§; 1# to 1‚Ñ§; 0# to 0‚Ñ§)
  module ‚Ñù = Field realField
    renaming (Carrier to ‚Ñù; 1# to 1‚Ñù; 0# to 0‚Ñù)

  Bits : ‚Ñï ‚Üí Set b‚ÇÅ
  Bits n = Bits.Carrier {n}

  open ùîπ public using (Bit; 1ùîπ; 0ùîπ)
  open Bits public using (ones; zeros)
  open ‚Ñ§ public using (‚Ñ§; 1‚Ñ§; 0‚Ñ§)
  open ‚Ñù public using (‚Ñù; 1‚Ñù; 0‚Ñù)

  module ‚Ñ§-Reasoning = Reasoning ‚Ñ§.strictPartialOrder
  module ‚Ñù-Reasoning = Reasoning ‚Ñù.strictPartialOrder

  field
    integerDiscrete : ‚àÄ x y ‚Üí y ‚Ñ§.‚â§ x ‚äé x ‚Ñ§.+ 1‚Ñ§ ‚Ñ§.‚â§ y
    1‚ââ0 : 1‚Ñ§ ‚Ñ§.‚ââ 0‚Ñ§

    _/1 : ‚Ñ§ ‚Üí ‚Ñù
    ‚åä_‚åã : ‚Ñù ‚Üí ‚Ñ§
    /1-isHomo : IsRingHomomorphism ‚Ñ§.Unordered.rawRing ‚Ñù.Unordered.rawRing _/1
    ‚åä‚åã-isHomo : IsRingHomomorphism ‚Ñù.Unordered.rawRing ‚Ñ§.Unordered.rawRing ‚åä_‚åã
    /1-mono : ‚àÄ x y ‚Üí x ‚Ñ§.< y ‚Üí x /1 ‚Ñù.< y /1
    ‚åä‚åã-floor : ‚àÄ x y ‚Üí x ‚Ñ§.‚â§ ‚åä y ‚åã ‚Üí ‚åä y ‚åã ‚Ñ§.< x ‚Ñ§.+ 1‚Ñ§
    ‚åä‚åã‚àò/1‚âóid : ‚àÄ x ‚Üí ‚åä x /1 ‚åã ‚Ñ§.‚âà x

  module /1 = IsRingHomomorphism /1-isHomo renaming (‚ü¶‚üß-cong to cong)
  module ‚åä‚åã = IsRingHomomorphism ‚åä‚åã-isHomo renaming (‚ü¶‚üß-cong to cong)

  bitRawBooleanAlgebra : RawBooleanAlgebra b‚ÇÅ b‚ÇÇ
  bitRawBooleanAlgebra = record
    { _‚âà_ = _‚âà_
    ; _‚à®_ = _‚à®_
    ; _‚àß_ = _‚àß_
    ; ¬¨_  = ¬¨_
    ; ‚ä§   = ‚ä§
    ; ‚ä•   = ‚ä•
    }
    where open BooleanAlgebra bitBooleanAlgebra

  rawPseudocode : RawPseudocode b‚ÇÅ b‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ r‚ÇÅ r‚ÇÇ r‚ÇÉ
  rawPseudocode = record
    { bitRawBooleanAlgebra = bitRawBooleanAlgebra
    ; integerRawRing = ‚Ñ§.rawRing
    ; realRawField = ‚Ñù.rawField
    ; _‚âü·∂ª_ = ‚Ñ§._‚âü_
    ; _<·∂ª?_ = ‚Ñ§._<?_
    ; _‚âü ≥_ = ‚Ñù._‚âü_
    ; _< ≥?_ = ‚Ñù._<?_
    ; _‚âü·µá‚ÇÅ_ = ùîπ._‚âü_
    ; _/1 = _/1
    ; ‚åä_‚åã = ‚åä_‚åã
    }

  open RawPseudocode rawPseudocode using (module ‚Ñ§‚Ä≤; module ‚Ñù‚Ä≤) public
